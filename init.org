#+TITLE: Emacs configuration file
#+AUTHOR: Kevin Lipe
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* About

This is an attempt at an Emacs configuration written in Org mode, which is mostly so I can look through it and remember how all of this works. Also, if it's going to be public, it might as well be well-documented. A lot of this setup (at least in spirit, especially the tangle-and-compile bits) is borrowed from [[https://github.com/larstvei/dot-emacs][Lars Tveito's Emacs/Org setup]].

* Configurations
** Meta

   All changes to the configuration should be done in =init.org=, *not* in
   =init.el=. Any changes in the =init.el= will be overwritten by saving
   =init.org=. The =init.el= in this repo should not be tracked by git, and
   is replaced the first time Emacs is started (assuming it has been renamed
   to =~/.emacs.d=).

   Emacs can't load =.org=-files directly, but =org-mode= provides functions
   to extract the code blocks and write them to a file. There are multiple
   ways of handling this; like suggested by [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][this StackOverflow post]], one
   could just use =org-babel-load-file=, but I had problems with
   byte-compilation. Previously I tracked both the =org.=- and =el.=-files,
   but the git commits got a little messy. So here is a new approach.

   When this configuration is loaded for the first time, the ~init.el~ is
   the file that is loaded. It looks like this:

   #+BEGIN_SRC emacs-lisp :tangle no
   ;; This file replaces itself with the actual configuration at first run.

   ;; We can't tangle without org!
   (require 'org)
   ;; Open the configuration
   (find-file (concat user-emacs-directory "init.org"))
   ;; tangle it
   (org-babel-tangle)
   ;; load it
   (load-file (concat user-emacs-directory "init.el"))
   ;; finally byte-compile it
   (byte-compile-file (concat user-emacs-directory "init.el"))
   #+END_SRC

   It tangles the org-file, so that this file is overwritten with the actual
   configuration.

   There is no reason to track the =init.el= that is generated; by running
   the following command =git= will not bother tracking it:

   #+BEGIN_SRC sh :tangle no
   git update-index --assume-unchanged init.el
   #+END_SRC

   If one wishes to make changes to the repo-version of =init.el= start
   tracking again with:

   #+BEGIN_SRC sh :tangle no
   git update-index --no-assume-unchanged init.el
   #+END_SRC

   The =init.el= should (after the first run) mirror the source blocks in
   the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
   extracts the code blocks from the current file into a source-specific
   file (in this case a =.el=-file).

   To avoid doing this each time a change is made we can add a function to
   the =after-save-hook= ensuring to always tangle and byte-compile the
   =org=-document after changes.

   #+BEGIN_SRC emacs-lisp
   (defun tangle-init ()
     "If the current buffer is 'init.org' the code-blocks are
   tangled, and the tangled file is compiled."
     (when (equal (buffer-file-name)
                  (expand-file-name (concat user-emacs-directory "init.org")))
       ;; Avoid running hooks when tangling.
       (let ((prog-mode-hook nil))
         (org-babel-tangle)
         (byte-compile-file (concat user-emacs-directory "init.el")))))

   (add-hook 'after-save-hook 'tangle-init)
   #+END_SRC

   I'd like to keep a few settings private, so we load a =private.el= if it
   exists after the init-file has loaded.

   #+BEGIN_SRC emacs-lisp
   (add-hook
    'after-init-hook
    (lambda ()
      (let ((private-file (concat user-emacs-directory "private.el")))
        (when (file-exists-p private-file)
          (load-file private-file)))))
   #+END_SRC

** Packages

   Managing extensions for Emacs is simplified using =package= which is
   built in to Emacs 24 and newer. To load downloaded packages we need to
   initialize =package=. =cl= is a library that contains many functions from
   Common Lisp, and comes in handy quite often, so we want to make sure it's
   loaded, along with =package=, which is obviously needed.

  #+BEGIN_SRC emacs-lisp
  (require 'cl)
  (require 'package)
  (package-initialize)
  #+END_SRC

   Packages can be fetched from different mirrors, [[http://melpa.milkbox.net/#/][melpa]] is the largest
   archive and is well maintained.

  #+BEGIN_SRC emacs-lisp
   (setq package-archives
         '(("gnu" . "http://elpa.gnu.org/packages/")
           ("org" . "http://orgmode.org/elpa/")
           ("MELPA" . "http://melpa.org/packages/")))
  #+END_SRC

   The configuration assumes that the packages listed below are
   installed. To ensure we install missing packages if they are missing.

   #+BEGIN_SRC emacs-lisp
   (let* ((packages
         '(base16-theme         ; Base16 theme packages; we'll use "Eighties"
           magit                ; control Git from Emacs
	   markdown-mode        ; Major mode for editing Markdown files
           org                  ; Outline-based notes manager
           ox-pandoc            ; org exporter for pandoc
           olivetti             ; Minor mode for a nice writing environment.
           pandoc-mode          ; Minor mode for interacting with pandoc via hydra
	   request              ; something URL related
	   request-deferred     ; not really sure what this does
	   wc-goal-mode         ; Set goal wordcounts (minor mode)
	   with-editor          ; use Emacs as $EDITOR
	   auto-compile         ; automatically compile Emacs Lisp libraries
           expand-region        ; Increase selected region by semantic units
           try))                ; Try out Emacs packages
          ;; Remove all packages already installed
          (packages (remove-if 'package-installed-p packages)))
     (when packages
       (ignore-errors (package-refresh-contents)
                      (mapcar 'package-install packages)
                      ;; This package is only relevant for Mac OS X.
                      (when (memq window-system '(mac ns))
                        (package-install 'exec-path-from-shell)))))
   #+END_SRC

** Mac OS X

These are the bits of the configuration which are only necessary on Mac OS X (which is where I run this configuration half the time; the other half is spent on Fedora). =exec-path-from-shell= includes environment variables from the shell (things like =$PATH= and such). 

   #+BEGIN_SRC emacs-lisp
;; use exec-path-from-shell so the $PATH is right
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize) ;; use exec-path-from-shell for $PATH
  (setq insert-directory-program (executable-find "gls")) ;; use GNU coreutils from Homebrew for dired mode
  (setq mac-command-modified 'meta) ;; use Command instead of Option as Meta
  (setq mac-option-modified nil) ;; don't do anything with Option
)
  #+END_SRC

** Theme

This sets =base16-eighties-dark= as the default theme.

#+BEGIN_SRC emacs-lisp
  (load-theme 'base16-eighties-dark t)
#+END_SRC

Use the Hack font (which is installed on my systems) at different sizes depending on whether we're on OS X or on Linux.

#+BEGIN_SRC emacs-lisp
  (cond ((member "Hack" (font-family-list))
   (if (memq window-system '(mac ns))
    (set-face-attribute 'default nil :font "Hack" :height 130) ;; on OS X
    (set-face-attribute 'default nil :font "Hack" :height 105)) ;; on Linux
    ))
#+END_SRC

We want to suppress the (kinda hideous) Emacs splash screen, and also hide the icon-based toolbar (but not the menubar).

#+BEGIN_SRC emacs-lisp
  ;; Hide the splash screen and the toolbar
   (setq inhibit-startup-message t)
   (tool-bar-mode -1)
#+END_SRC

** Autosave with custom-set-variables

We want Emacs to use directories within =~/.emacs.d-= for autosaving files and backup files so that they're not scattered all over the filesystem. So far the only way I know how to do this is using =custom-set-variables=.

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
    ;; Put autosave files (ie #foo#) and backup files (ie foo~) in ~/.emacs.d/.
    '(auto-save-file-name-transforms (quote ((".*" "~/.emacs.d/autosaves/\\1" t))))
    '(backup-directory-alist (quote ((".*" . "~/.emacs.d/backups/")))))

  ;; create the autosave dir if necessary, since emacs won't.
  (make-directory "~/.emacs.d/autosaves/" t)

  ;; also set olivetti mode width since I don't know where else to do this
   '(olivetti-body-width 72)
#+END_SRC

* Mode-specific
** Markdown-mode

This is specific stuff for =markdown-mode= that makes things better.

We want to load =pandoc-mode= and =wc-goal-mode= every time we load =markdown-mode= so that we can export to everything and also keep track of word counts.

#+BEGIN_SRC emacs-lisp
;; set up markdown-mode with the proper minor modes
(add-hook 'markdown-mode-hook 'pandoc-mode)
(add-hook 'markdown-mode-hook 'wc-goal-mode)
#+END_SRC

Whenever a file ends in =text=, =markdown=, =md=, or =mmd=, automatically load =markdown-mode=.

#+BEGIN_SRC emacs-lisp
;; autoload these filetypes as markdown-mode
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.mmd\\'" . markdown-mode))
#+END_SRC

Set up a special keyboard shortcut (that only works on the Mac, but for some reason I'm defining it everywhere) so that C-c m opens the current Markdown file in Marked.app for previewing.

#+BEGIN_SRC emacs-lisp
;; C-c m opens the current file in Marked.app
(defun markdown-preview-file ()
   "run Marked on the current file and revert the buffer"
   (interactive)
   (shell-command
    (format "open -a /Applications/Marked\\ 2.app %s"
            (shell-quote-argument (buffer-file-name))))
   )
 (global-set-key "\C-cm" 'markdown-preview-file)
#+END_SRC

** Visual-line-mode

I want to automatically use =visual-line-mode= if I'm in a mode that is derived from =text-mode= or from =org-mode=.

#+BEGIN_SRC emacs-lisp
  ;; use visual line mode while in anything derived from Text mode or Org
  (add-hook 'text-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC

** Org mode

Automatically load Org for =org= files. Also, use C-c a to automatically pull up the Org agenda.

#+BEGIN_SRC emacs-lisp
  ;; org mode stuff, including C-c a for agenda
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (setq org-log-done t)
#+END_SRC

** ox-pandoc

Set everything to be a standalone =pandoc= export except for HTML output, which is to be copied and pasted into a blog editor anyway.

#+BEGIN_SRC emacs-lisp
  ;; default options for all output formats
  (setq org-pandoc-options '((standalone . t)))
  ;; cancel above settings only for 'html' format
  (setq org-pandoc-options-for-html '((standalone . nil)))
#+END_SRC

** wc-goal-mode

Set the display for =wc-goal-mode= in the modeline.

#+BEGIN_SRC emacs-lisp
  ;; Set wc-goal-mode modeline display
  (setq wc-goal-modeline-format "WC[%w;%tw/%gw]")
#+END_SRC

* Leftovers

This is all stuff that's in the config file that doesn't need to be pulled out yet because I'm not sure whether it's important or not.

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.



;; theme stuff
 '(custom-enabled-themes (quote (base16-eighties-dark)))
 '(custom-safe-themes
   (quote
    ("f245c9f24b609b00441a6a336bcc556fe38a6b24bfc0ca4aedd4fe23d858ba31" "c2ffe309e80032963afa9cf462bb119503bebd40f8df831ccdb2de13813f48e7" "76659fd7fc5ce57d14dfb22b30aac6cf0d4eb0a279f4131be3945d3cfff10bc6" "f5eb916f6bd4e743206913e6f28051249de8ccfd070eae47b5bde31ee813d55f" "d34d4f2e7464e8425ddd5964e78a598a6bda7aa6e541eace75a44cb1700e16ec" "7153b82e50b6f7452b4519097f880d968a6eaf6f6ef38cc45a144958e553fbc6" "11636897679ca534f0dec6f5e3cb12f28bf217a527755f6b9e744bd240ed47e1" default)))
 '(diary-entry-marker (quote font-lock-variable-name-face))

 '(package-selected-packages
   (quote
    (wc-goal-mode magit-annex magit ox-pandoc zenburn-theme wc-mode pandoc-mode org olivetti markdown-mode exec-path-from-shell anti-zenburn-theme alect-themes))))



(if (eq system-type 'darwin) ;; use Source Code Pro on OS X, Hack on Linux
 ;; custom-set-faces for OS X (the "if")
     (custom-set-faces
      '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 140 :width normal :foundry "nil" :family "Hack")))))
 ;; Custom-Set-Faces for Linux (the "else")
   (custom-set-faces
    '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 105 :width normal :foundry "nil" :family "Hack"))))))





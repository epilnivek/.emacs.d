#+TITLE: Org-based Emacs configuration
#+AUTHOR: Kevin Lipe
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
   
* About

This is my Emacs configuration, written in Org mode, which is mostly so I can look through it and remember how all of this works. Also, if it's going to be public, it might as well be well-documented. A lot of this setup (at least in spirit, and literally in the case of the tangle-and-compile bits) is borrowed from [[https://github.com/larstvei/dot-emacs][Lars Tveito's Emacs/Org setup]].

* Configurations
  
** Meta

   All changes to the configuration should be done in =init.org=, *not* in
   =init.el=. Any changes in the =init.el= will be overwritten by saving
   =init.org=. The =init.el= in this repo should not be tracked by git, and
   is replaced the first time Emacs is started (assuming it has been renamed
   to =~/.emacs.d=).

   Emacs can't load =.org=-files directly, but =org-mode= provides functions
   to extract the code blocks and write them to a file. There are multiple
   ways of handling this; like suggested by [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][this StackOverflow post]], one
   could just use =org-babel-load-file=, but I had problems with
   byte-compilation. Previously I tracked both the =org.=- and =el.=-files,
   but the git commits got a little messy. So here is a new approach.

   When this configuration is loaded for the first time, the ~init.el~ is
   the file that is loaded. It looks like this:

   #+BEGIN_SRC emacs-lisp :tangle no
   ;; This file replaces itself with the actual configuration at first run.

   ;; We can't tangle without org!
   (require 'org)
   ;; Open the configuration
   (find-file (concat user-emacs-directory "init.org"))
   ;; tangle it
   (org-babel-tangle)
   ;; load it
   (load-file (concat user-emacs-directory "init.el"))
   ;; finally byte-compile it
   (byte-compile-file (concat user-emacs-directory "init.el"))
   #+END_SRC

   It tangles the org-file, so that this file is overwritten with the actual
   configuration.

   There is no reason to track the =init.el= that is generated; by running
   the following command =git= will not bother tracking it:

   #+BEGIN_SRC sh :tangle no
   git update-index --assume-unchanged init.el
   #+END_SRC

   If one wishes to make changes to the repo-version of =init.el= start
   tracking again with:

   #+BEGIN_SRC sh :tangle no
   git update-index --no-assume-unchanged init.el
   #+END_SRC

   The =init.el= should (after the first run) mirror the source blocks in
   the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
   extracts the code blocks from the current file into a source-specific
   file (in this case a =.el=-file).

   To avoid doing this each time a change is made we can add a function to
   the =after-save-hook= ensuring to always tangle and byte-compile the
   =org=-document after changes.

   #+BEGIN_SRC emacs-lisp
   (defun tangle-init ()
     "If the current buffer is 'init.org' the code-blocks are
   tangled, and the tangled file is compiled."
     (when (equal (buffer-file-name)
                  (expand-file-name (concat user-emacs-directory "init.org")))
       ;; Avoid running hooks when tangling.
       (let ((prog-mode-hook nil))
         (org-babel-tangle)
         (byte-compile-file (concat user-emacs-directory "init.el")))))

   (add-hook 'after-save-hook 'tangle-init)
   #+END_SRC

   I'd like to keep a few settings private, so we load a =private.el= if it
   exists after the init-file has loaded.

   #+BEGIN_SRC emacs-lisp
   (add-hook
    'after-init-hook
    (lambda ()
      (let ((private-file (concat user-emacs-directory "private.el")))
        (when (file-exists-p private-file)
          (load-file private-file)))))
   #+END_SRC
 
** Packages

   Managing extensions for Emacs is simplified using =package= which is
   built in to Emacs 24 and newer. To load downloaded packages we need to
   initialize =package=. =cl= is a library that contains many functions from
   Common Lisp, and comes in handy quite often, so we want to make sure it's
   loaded, along with =package=, which is obviously needed.

    #+BEGIN_SRC emacs-lisp
    (require 'cl)
    (require 'package)
    (setq package-enable-at-startup nil) ;; don't load packages before startup
    (package-initialize)
    #+END_SRC

     Packages can be fetched from different mirrors, [[http://melpa.milkbox.net/#/][melpa]] is the largest
     archive and is well maintained.

    #+BEGIN_SRC emacs-lisp
     (setq package-archives
           '(("gnu" . "http://elpa.gnu.org/packages/")
             ("org" . "http://orgmode.org/elpa/")
             ("MELPA" . "http://melpa.org/packages/")))
    #+END_SRC

     The configuration assumes that the packages listed below are installed. To ensure we install missing packages if they are missing.

     #+BEGIN_SRC emacs-lisp
     (let* ((packages '(
             use-package          ; Lazy loading and requirements for Emacs packages
	     evil                 ; Emacs Vi something Layer, which gives us text objects
             base16-theme         ; Base16 color schemes for Emacs
	     ivy                  ; abo-abo completion framework
	     counsel              ; find things in the filesystem using ivy
	     swiper               ; find things in an Emacs buffer using ivy
	     magit                ; control Git from Emacs
	     markdown-mode        ; Major mode for editing Markdown files
             org                  ; Outline-based notes manager
             org-bullets          ; Fancy UTF-8 bullets for org
	     ox-pandoc            ; org exporter for pandoc
             olivetti             ; Minor mode for a nice writing environment.
             pandoc-mode          ; Minor mode for interacting with pandoc via hydra
	     request              ; something URL related
	     request-deferred     ; not really sure what this does
	     spaceline            ; spacemacs-ish modeline thing
	     spacemacs-theme      ; spacemacs color scheme
	     wc-goal-mode         ; Set goal wordcounts (minor mode)
	     with-editor          ; use Emacs as $EDITOR
	     auto-compile         ; automatically compile Emacs Lisp libraries
             expand-region        ; Increase selected region by semantic units
	     csv-mode             ; For working with .csv files intelligently
             try))                ; Try out Emacs packages
            ;; Remove all packages already installed
            (packages (remove-if 'package-installed-p packages)))
       (when packages
	 (ignore-errors (package-refresh-contents)
			(mapc 'package-install packages)
			;; This package is only relevant for Mac OS X.
			(when (memq window-system '(mac ns))
                          (package-install 'exec-path-from-shell)))))
			  
(require 'use-package) ;; make sure this is already loaded.
     #+END_SRC

** Defaults

Always start the server so that =emacsclient= works from the command line.

#+BEGIN_SRC emacs-lisp
(server-start) ;; start the server on startup
#+END_SRC

Answering /yes/ and /no/ to each question from Emacs can be tedious, a
   single /y/ or /n/ will suffice.

   #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   To avoid file system clutter we put all auto saved files in a single
   directory.

   #+BEGIN_SRC emacs-lisp
   (defvar emacs-autosave-directory
     (concat user-emacs-directory "autosaves/")
     "This variable dictates where to put auto saves. It is set to a
     directory called autosaves located wherever your .emacs.d/ is
     located.")

   ;; Sets all files to be backed up and auto saved in a single directory.
   (setq backup-directory-alist
         `((".*" . ,emacs-autosave-directory))
         auto-save-file-name-transforms
         `((".*" ,emacs-autosave-directory t)))
   #+END_SRC

These are some other "sane" defaults:

Silently delete excess backup versions of files:
#+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1)
#+END_SRC

Don't ask for confirmation when opening a symlinked file:
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

Use UTF-8 for everything by default (if this isn't already happening)
#+BEGIN_SRC emacs-lisp
(setq coding-system-for-read 'utf-8)
(setq coding-system-for-write 'utf-8)
#+END_SRC

** Customized key bindings

First things first, I want the Escape key to quit whatever I'm doing in the minibuffer.

#+BEGIN_SRC emacs-lisp
;;(setq normal-escape-enabled t)

;; make Esc quit whatever's happening in the minibuffer
; Map escape to cancel (like C-g)...
(define-key isearch-mode-map [escape] 'isearch-abort)   ;; isearch
(define-key isearch-mode-map "\e" 'isearch-abort)   ;; \e seems to work better for terminals
(global-set-key [escape] 'keyboard-escape-quit)         ;; everywhere else
#+END_SRC

Here are some keybindings I want to use, provided by =general.el=. 

-  Map the *Meta* key to also be invoked by C-x C-m (and C-c C-m) so that you don't have to reach all over the place for them.
- Map C-w to =backward-kill-word= for easier fixing of typos (which means less reaching for backspace) and then map =kill-region= to C-x C-k so that we can still get to it easily.

I want to start creating new keybindings using =general= instead of this old-school way, so I will make sure that it's installed using =use-package=, and then bind my keys:

#+BEGIN_SRC emacs-lisp
(use-package general :ensure t
  :config 
  (general-define-key "\C-x\C-m" 'execute-extended-command) ; don't reach for Meta, do this instead! 
  (general-define-key "\C-c\C-m" 'execute-extended-command) ; same as above, if you miss X key
  (general-define-key "C-w" 'backward-kill-word)   
  (general-define-key "\C-x\C-k" 'kill-region)
)

(general-define-key
  ;; replace default keybindings
  "C-s" 'swiper             ; search for string in current buffer
  "M-x" 'counsel-M-x        ; replace default M-x with ivy backend
  )

(use-package which-key :ensure t)
(general-define-key
 :prefix "C-c"
 ;; bind to simple key press
  "b"	'ivy-switch-buffer  ; change buffer, chose using ivy
  "/"   'counsel-git-grep   ; find string in git project
  ;; bind to double key press
  "f"   '(:ignore t :which-key "files")
  "ff"  'counsel-find-file
  "fr"	'counsel-recentf
  "p"   '(:ignore t :which-key "project")
  "pf"  '(counsel-git :which-key "find file in git dir")
  )
#+END_SRC

** Mac OS X

These are the bits of the configuration which are only necessary on Mac OS X (which is where I run this configuration half the time; the other half is spent on Fedora). =exec-path-from-shell= includes environment variables from the shell (things like =$PATH= and such). 

   #+BEGIN_SRC emacs-lisp
;; code to run only if we're on an OS X system
(when (memq window-system '(mac ns))
  ;; use GNU coreutils for dired (installed from Homebrew)
  (setq insert-directory-program (executable-find "gls")) 
  ;; use Command instead of Option as Meta
  (setq mac-command-modifier 'meta) 
  ;; don't do anything with Option
  (setq mac-option-modifier nil))
  #+END_SRC

** Theme, Fonts, and Appearance

I like to use the Base16 themes. So far =base16-atelier-heath= is what I like, but it changes pretty regularly. In the terminal (including on Windows Subsystem for Linux), I like to use =wheatgrass= instead because it works much better there.

#+BEGIN_SRC emacs-lisp
(if (window-system) (load-theme 'base16-atelier-heath t nil) ;; (window-system) returns nil if emacs isn't running in one.
      (load-theme 'wheatgrass t nil)) ;; load wheatgrass if we can't use the base16 theme.
#+END_SRC

I like to use the dark theme most of the time but when I want a light theme, I like the light version of the same theme, so I keep the Base16 version of it loaded.

#+BEGIN_SRC emacs-lisp
(when (window-system) (load-theme 'base16-atelier-heath-light t t)) ;; load a light theme but don't enable it if there's a window system.
#+END_SRC

I like to use the Fira Code font on OS X, but on Linux I like to use IBM Plex Mono font at a different size.

#+BEGIN_SRC emacs-lisp
   (if (memq window-system '(mac ns))
    (set-face-attribute 'default nil :font "Fira Code" :height 150) ;; on OS X
    (set-face-attribute 'default nil :font "IBM Plex Mono" :height 110)) ;; on Linux
#+END_SRC

We want to suppress the (hideous) Emacs splash screen, and also hide the icon-based toolbar, but not the menubar.

#+BEGIN_SRC emacs-lisp
  ;; Hide the splash screen and the toolbar
   (setq inhibit-startup-message t)
   (tool-bar-mode -1)
#+END_SRC

** custom-set-variables

This sets the default width of =olivetti-mode= since I'm not sure how else to do it.

#+BEGIN_SRC emacs-lisp
  (custom-set-variables

  ;; also set olivetti mode width since I don't know where else to do this
   '(olivetti-body-width 72))
#+END_SRC

* Mode-specific 

** Markdown-mode

This is specific stuff for =markdown-mode= that makes things better.

We want to load =pandoc-mode= and =wc-goal-mode= every time we load =markdown-mode= so that we can export to everything and also keep track of word counts.

#+BEGIN_SRC emacs-lisp
;; set up markdown-mode with the proper minor modes
(add-hook 'markdown-mode-hook 'pandoc-mode)
(add-hook 'markdown-mode-hook 'wc-goal-mode)
#+END_SRC

Whenever a file ends in =text=, =markdown=, =md=, or =mmd=, automatically load =markdown-mode=.

#+BEGIN_SRC emacs-lisp
;; autoload these filetypes as markdown-mode
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.mmd\\'" . markdown-mode))
#+END_SRC

Set up a special keyboard shortcut (that only works on the Mac, but for some reason I'm defining it everywhere) so that C-c m opens the current Markdown file in Marked.app for previewing.

#+BEGIN_SRC emacs-lisp
;; C-c m opens the current file in Marked.app
(defun markdown-preview-file ()
   "run Marked on the current file and revert the buffer"
   (interactive)
   (shell-command
    (format "open -a ~/Applications/Marked\\ 2.app %s"
            (shell-quote-argument (buffer-file-name))))
   )
 (global-set-key "\C-cm" 'markdown-preview-file)
#+END_SRC

** Visual-line-mode

I want to automatically use =visual-line-mode= if I'm in a mode that is derived from =text-mode= or from =org-mode=.

#+BEGIN_SRC emacs-lisp
  ;; use visual line mode while in anything derived from Text mode or Org
  (add-hook 'text-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC

** Org mode

Automatically load Org for =org= files. Also, use C-c a to automatically pull up the Org agenda. Also, use =org-bullets= for fancy UTF-8 bullets instead of ugly ones in Org mode.

#+BEGIN_SRC emacs-lisp
  ;; org mode stuff, including C-c a for agenda
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (setq org-log-done t)

;; Set to the location of your Org files on your local system
;; (setq org-directory "~/org")
;; Set to the name of the file where new notes will be stored
;; (setq org-mobile-inbox-for-pull "~/org/flagged.org")
;; Set to <your Dropbox root directory>/MobileOrg.
;; (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")

#+END_SRC

** ox-pandoc

Set everything to be a standalone =pandoc= export except for HTML output, which is to be copied and pasted into a blog editor anyway.

#+BEGIN_SRC emacs-lisp
  ;; default options for all output formats
  (setq org-pandoc-options '((standalone . t)))
  ;; cancel above settings only for 'html' format
  (setq org-pandoc-options-for-html '((standalone . nil)))
  ;; special settings for latex-pdf exporter
  (setq org-pandoc-options-for-latex-pdf '((latex-engine . "xelatex")))
#+END_SRC

** nXML mode

A function borrowed from [[http://stackoverflow.com/questions/12492/pretty-printing-xml-files-on-emacs#12534][someone else borrowing it from]] [[http://blog.bookworm.at/2007/03/pretty-print-xml-with-emacs.html][Benjamin Ferrari]] for pretty-printing a region of XML being edited with =nxml-mode=.

#+BEGIN_SRC emacs-lisp
(defun bf-pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
this.  The function inserts linebreaks to separate tags that have
nothing but whitespace between them.  It then indents the markup
by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
      (nxml-mode)
      (goto-char begin)
      (while (search-forward-regexp "\>[ \\t]*\<" nil t) 
        (backward-char) (insert "\n"))
      (indent-region begin end))
    (message "Ah, much better!"))
#+END_SRC

** wc-goal-mode

Set the display for =wc-goal-mode= in the modeline.

#+BEGIN_SRC emacs-lisp
  ;; Set wc-goal-mode modeline display
  (setq wc-goal-modeline-format "WC[%w;%tw/%gw]")
#+END_SRC

** csv-mode

We want =csv-mode= to automatically load when we open a file with the .csv extension.

#+BEGIN_SRC emacs-lisp
;; autoload these filetypes as csv-mode
(autoload 'csv-mode "csv-mode"
   "Major mode for editing CSV files" t)
(add-to-list 'auto-mode-alist '("\\.csv\\'" . csv-mode))
#+END_SRC
* Evil mode
  
Of course I want to use Evil for actually moving around in my files. I need to make sure it's loaded all the time by default:

#+BEGIN_SRC emacs-lisp
;; turn off Evil mode until I have time to learn it better
;; (require 'evil)
;; (evil-mode 1)
#+END_SRC

I know there's a lot more to Evil that I haven't explored yet, but I'm still figuring it out.

* License

  My Emacs configurations written in Org mode. Format based on the Emacs configuration of Lars Tveito.

  Copyright (c) 2015 - 2016 Kevin Lipe
  Copyright (c) 2013 - 2015 Lars Tveito

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  
